RouterPool{
    akka.actor.deployment{
    /round-robin-dispatch/random-router-pool{
            router = balancing-pool
            nr-of-instances = 10
        }
    }
}


RoundRobinGroup{
akka {
actor {
    provider = "akka.remote.RemoteActorRefProvider"
    deployment{
            /round-robin-group-dispatch/remote-round-robin{
                    router = random-group
                    routees.paths = ["akka.tcp://remote-system@10.248.66.129:33669/user/remote-worker",
                    "akka.tcp://remote-system-1@10.248.66.127:47576/user/remote-worker-1"]
            }
        }
 }
remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
        hostname = 10.248.66.70
        port = 13782
        }
    }
  }
}


RemoteListener{
akka {
actor {
    provider = "akka.remote.RemoteActorRefProvider"
 }
remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
        hostname = 10.248.66.129
        port = 33669
       }
    }
  }
}

RemoteListener1{
akka {
actor {
    provider = "akka.remote.RemoteActorRefProvider"
 }
remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
        hostname = 10.248.66.127
        port = 47576
        }
    }
  }
}

RemoteLookupListener{
akka {
actor {
    provider = "akka.remote.RemoteActorRefProvider"
 }
remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
        hostname = 10.248.66.127
        port = 47576
       }
    }
  }
}


RemoteCreateListener{
akka {
actor {
    provider = "akka.remote.RemoteActorRefProvider"
    deployment{
        /remote-worker-create{
            remote = "akka.tcp://remote-system@127.0.0.1:1550"
        }
    }
 }
remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
        hostname = "127.0.0.1"
        port = 1558
        }
    }
  }
}


FrontEndCluster{
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 10.248.66.70
      port = 37719
    }
  }

  cluster {
    seed-nodes = [
        "akka.tcp://transform-system@10.248.66.68:37719",
        "akka.tcp://transform-system@10.248.66.127:9000"
      ]
      roles = ["frontend"]
    auto-down-unreachable-after = 10s
  }
    log-dead-letters = 0
    log-dead-letters-during-shutdown = on
}
#akka.cluster.min-nr-of-members = 4
akka.cluster.metrics.enabled=off
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native
akka.actor.warn-about-java-serializer-usage=false

}

BackEndCluster{
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 0
      port = 0
    }
  }

  cluster {
    seed-nodes = [
        "akka.tcp://load-balancing-system@127.0.0.1:9000"
      ]
      roles = ["backend"]
    auto-down-unreachable-after = 10s
  }
      log-dead-letters = 0
      log-dead-letters-during-shutdown = on
}
#akka.cluster.min-nr-of-members = 3
akka.cluster.metrics.enabled=off
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native
akka.actor.warn-about-java-serializer-usage=false
}

SeedNodeCluster{
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 10.248.66.129
      port = 0
    }
  }

  cluster {
    roles = ["seednode"]
    seed-nodes = [
      "akka.tcp://load-balancing-system@10.248.66.127:47576",
      "akka.tcp://load-balancing-system@10.248.66.68:37719"
          ]
    auto-down-unreachable-after = 10s
  }
      log-dead-letters = 0
      log-dead-letters-during-shutdown = on
}
akka.cluster.min-nr-of-members = 3
akka.cluster.metrics.enabled=off
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native
}

loadbalancer{
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 10.248.66.70
      port = 37719
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://load-balancing-system@10.248.66.68:37719",
      "akka.tcp://load-balancing-system@10.248.66.127:47576"
      ]
    auto-down-unreachable-after = 10s
  }

    log-dead-letters = 0
    log-dead-letters-during-shutdown = on
}

#akka.cluster.min-nr-of-members = 4
akka.cluster.metrics.enabled=off
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
}

ClusterAware{
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = 10.248.66.70
      port = 47576
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://cluster-aware-system@10.248.66.70:47576"]
  }
      log-dead-letters = 0
      log-dead-letters-during-shutdown = on
}


bounded-mailbox {
  mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
  mailbox-capacity = 1
  mailbox-push-timeout-time = 10s
}
akka.actor.mailbox.requirements {
  "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" = bounded-mailbox
}
akka.actor.deployment {
  /cluster-master/workerRouter {
    router = round-robin-group
    #scatter-gather-group #balancing-pool #scatter-gather-group #round-robin-group #smallest-mailbox-pool #random-group
    routees.paths = ["/user/cluster-worker"]
    cluster {
      enabled = on
      allow-local-routees = on
      use-role = worker
    }
  }
}
akka.cluster.metrics.enabled=off
akka.actor.warn-about-java-serializer-usage=false
}